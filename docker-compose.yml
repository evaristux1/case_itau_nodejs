version: "3.8"

services:
  # Backend API (NestJS)
  api:
    build:
      context: ./back
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: itau-api
    ports:
      - "${API_PORT:-3000}:3000"
    environment:
      # App Config
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      API_PREFIX: api/v1
      API_VERSION: 1.0.0

      # Database
      DATABASE_PROVIDER: sqlite
      DATABASE_URL: file:./data/prod.db
      DATABASE_LOGGING: false
      DATABASE_POOL_SIZE: 10
      DATABASE_SSL: false
      DATABASE_SYNCHRONIZE: false

      # JWT & Security
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-change-in-production-please}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-1h}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-super-secret-refresh-key-change-in-production}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}

      # CORS
      CORS_ORIGINS: http://localhost:4200,http://localhost:80,http://localhost:8080

      # Rate Limiting
      RATE_LIMIT_TTL: 60
      RATE_LIMIT_MAX: 100

      # Cache (Redis disabled for now)
      CACHE_ENABLED: false

      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: json

      # Features
      FEATURE_SWAGGER_ENABLED: ${SWAGGER_ENABLED:-true}
      FEATURE_METRICS_ENABLED: true
      FEATURE_HEALTH_CHECK_ENABLED: true

      # Monitoring (optional)
      SENTRY_DSN: ${SENTRY_DSN:-}
      DATADOG_API_KEY: ${DATADOG_API_KEY:-}
      NEW_RELIC_LICENSE_KEY: ${NEW_RELIC_LICENSE_KEY:-}
    volumes:
      - api_data:/app/data
      - api_logs:/app/logs
    networks:
      - itau-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    depends_on: []

  web:
    build:
      context: ./front
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-production}
    container_name: itau-web
    ports:
      - "${WEB_PORT:-80}:80"
    environment:
      - API_URL=http://localhost:${API_PORT:-3000}/api/v1
    volumes:
      - web_logs:/var/log/nginx
    networks:
      - itau-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    depends_on:
      - api

  # Redis (Optional - for future caching)
  redis:
    image: redis:7-alpine
    container_name: itau-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - itau-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - cache
      - full

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: itau-nginx
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
    networks:
      - itau-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    depends_on:
      - api
      - web
    profiles:
      - proxy
      - full

volumes:
  api_data:
    name: itau_api_data
    driver: local
  api_logs:
    name: itau_api_logs
    driver: local
  web_logs:
    name: itau_web_logs
    driver: local
  redis_data:
    name: itau_redis_data
    driver: local
  nginx_logs:
    name: itau_nginx_logs
    driver: local

networks:
  itau-network:
    name: itau-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
